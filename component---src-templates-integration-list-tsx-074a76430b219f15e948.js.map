{"version":3,"sources":["webpack:///./src/components/item-integration.tsx","webpack:///./node_modules/react-feather/dist/icons/arrow-right.js","webpack:///./src/templates/integration-list.tsx"],"names":["ItemIntegration","data","datasources","even","frontmatter","split","map","datasource","index","className","rowSpan","length","to","fields","slug","title","description","version","github","blog","_extends","Object","assign","target","i","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","ArrowRight","_ref","ref","_ref$color","color","_ref$size","size","rest","createElement","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","points","displayName","integrationList","location","pageContext","useEffect","window","dispatchEvent","CustomEvent","integrationItems","allMdx","edges","item","node","id","seo"],"mappings":"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","file":"component---src-templates-integration-list-tsx-074a76430b219f15e948.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\"\nimport { Link } from \"gatsby\"\nimport Img from \"gatsby-image\"\nimport { ArrowRight } from \"react-feather\"\n\nimport { IndexPageQuery_integration_edges_node } from \"../pages/__generated__/IndexPageQuery\"\n\ntype ItemIntegrationProps = { data: IndexPageQuery_integration_edges_node, even: boolean };\nexport const ItemIntegration: React.FC<ItemIntegrationProps> = ({ data, even }) => {\n\n    let datasources = data.frontmatter.datasources.split(',')\n\n    let rowList = datasources.map((datasource,index) =>{\n        return (\n            <tr className={`integration-item`}>\n                {index === 0 && (\n                    <td className=\"int-desc\" rowSpan={datasources.length}>\n                        <h3 className=\"mt-0\"><Link to={data.fields.slug} title={\"Read More\"}>{data.frontmatter.title}</Link></h3>\n                        <p>{data.frontmatter.description}</p>\n                    </td>\n                )}\n  \n                {index === 0 && (\n                    <td rowSpan={datasources.length}>\n                        <p>{data.frontmatter.version}</p>\n                    </td>\n                )}\n                <td className=\"int-datasources\">\n                    <p>{datasource}</p>\n                </td>\n                {index === 0 && (\n                    <td rowSpan={datasources.length}>\n                        <ul>\n                            <li className=\"mb-2 text-color-2\"><Link to={data.fields.slug} title={\"Read More\"}>Docs <ArrowRight className=\"inline-block\" /></Link></li>\n                            {data.frontmatter.github && (\n                                <li className=\"mb-2 text-color-2\"><Link to={data.frontmatter.github} title={\"Read More\"}>GitHub <ArrowRight className=\"inline-block\" /></Link></li>\n                            )}\n\n                            {data.frontmatter.blog && (\n                                <li className=\"mb-2 text-color-2\"><Link to={data.frontmatter.blog} title={\"Read More\"}>Blog <ArrowRight className=\"inline-block\" /></Link></li>\n                            )}\n                        </ul>\n                    </td>\n                )}\n            </tr> \n        )\n    })\n\n    return rowList\n}\n\nexport default ItemIntegration;","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef } from 'react';\nvar ArrowRight = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"5\",\n    y1: \"12\",\n    x2: \"19\",\n    y2: \"12\"\n  }), /*#__PURE__*/React.createElement(\"polyline\", {\n    points: \"12 5 19 12 12 19\"\n  }));\n});\nArrowRight.displayName = 'ArrowRight';\nexport default ArrowRight;","import React, { useEffect } from \"react\"\r\nimport { graphql, PageProps } from \"gatsby\"\r\nimport Layout from \"../components/layout\"\r\nimport IntegrationItem from \"../components/item-integration\"\r\nimport { IntegrationListQuery } from \"./__generated__/IntegrationListQuery\"\r\n\r\nexport default function integrationList({ data, pageContext, location }: PageProps<IntegrationListQuery, {}>) {\r\n\r\n\r\n    useEffect(() => {\r\n        window.dispatchEvent(new CustomEvent('scroll'))\r\n    }, [])\r\n\r\n    const integrationItems = data.allMdx.edges.map((item, i) => (\r\n        <IntegrationItem data={item.node} key={item.node.id} even={(i + 1) % 2 === 0}/>\r\n    ))\r\n\r\n    return (\r\n        <Layout\r\n            seo={{\r\n                title: \"Integrations\",\r\n            }}\r\n            location={location}\r\n        >\r\n            <div className=\"py-12 px-4 lg:px-0\">\r\n                <div className=\"title py-8 text-center\">\r\n                    <h2 className=\"text-5xl text-color-1\">\r\n                        Integrations\r\n                    </h2>\r\n                </div>\r\n                <div className=\"boxed py-8\">\r\n                    <p>OpenLineage connectors have been created for major job schedulers and data platforms. By using these connectors, the appropriate API calls will be made automatically each time your pipeline executes. They capture information about datasets, jobs, and runs, allowsing you to study lineage across multiple data sources.</p>\r\n                    <table className=\"integration-list\">\r\n                        <tr>\r\n                            <th>\r\n                                Platform\r\n                            </th>\r\n                            <th>\r\n                                Version\r\n                            </th>\r\n                            <th>\r\n                                Data Sources\r\n                            </th>\r\n                            <th>\r\n                                Resources\r\n                            </th>\r\n                        </tr>\r\n                        {integrationItems}\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport const query = graphql`\r\n    query IntegrationListQuery($skip: Int!, $limit: Int!) {\r\n        allMdx(\r\n            filter: { fields: { sourceName: { eq: \"integration\" } } }\r\n            sort: { fields: [frontmatter___title], order: ASC }\r\n            limit: $limit\r\n            skip: $skip\r\n        ) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    frontmatter {\r\n                        title\r\n                        description\r\n                        version\r\n                        datasources\r\n                        github\r\n                        blog\r\n                        image {\r\n                            publicURL\r\n                            childImageSharp {\r\n                                fluid(maxWidth: 1920) {\r\n                                    srcSet\r\n                                    ...GatsbyImageSharpFluid\r\n                                }\r\n                                id\r\n                            }\r\n                        }\r\n                    }\r\n                    fields {\r\n                        slug\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n"],"sourceRoot":""}